@startuml WorkReserve Entity Relationship Diagram

!define TABLE entity
!define PRIMARY_KEY {field} **field**
!define FOREIGN_KEY {field} #field#

title WorkReserve - Entity Relationship Diagram (ERD)

' User Entity
TABLE User {
  PRIMARY_KEY **id** : Long
  --
  fullName : String
  email : String (unique)
  password : String (hashed)
  role : Role (USER, ADMIN)
  createdAt : LocalDateTime
  --
  enabled : Boolean
  locked : Boolean
  emailVerified : Boolean
  verificationToken : String
  verificationTokenCreatedAt : LocalDateTime
  resetPasswordToken : String
  resetPasswordTokenCreatedAt : LocalDateTime
  failedLoginAttempts : Integer
  accountLockedAt : LocalDateTime
  unlockToken : String
  unlockTokenCreatedAt : LocalDateTime
  refreshToken : String
  refreshTokenExpiry : LocalDateTime
  banned : Boolean
  --
  ' 2FA Fields
  twoFactorEnabled : Boolean
  twoFactorSecret : String (hashed)
  backupCodes : String (JSON)
  twoFactorEnabledAt : LocalDateTime
}

' Room Entity
TABLE Room {
  PRIMARY_KEY **id** : Long
  --
  name : String (unique)
  type : RoomType (MEETING, CONFERENCE, WORKSPACE)
  pricePerHour : Double
  capacity : Integer
  description : String
  imageUrls : List<String>
}

' TimeSlot Entity
TABLE TimeSlot {
  PRIMARY_KEY **id** : Long
  --
  date : LocalDate
  startTime : LocalTime
  endTime : LocalTime
  FOREIGN_KEY #roomId# : Long
  --
  unique(date, startTime, endTime, roomId)
}

' Reservation Entity
TABLE Reservation {
  PRIMARY_KEY **id** : Long
  --
  FOREIGN_KEY #userId# : Long
  FOREIGN_KEY #slotId# : Long
  teamSize : Integer
  totalCost : Double
  status : ReservationStatus
  createdAt : LocalDateTime
  --
  unique(userId, slotId)
}

' Payment Entity (Logical - handled via Stripe)
TABLE Payment <<virtual>> {
  PaymentIntent ID (Stripe)
  --
  amount : Double
  currency : String (USD)
  status : PaymentStatus
  clientSecret : String
  reservationReference : Long
  --
  Note: Managed by Stripe API
  Not persisted as entity
}

' Role Enum
enum Role {
  USER
  ADMIN
}

' RoomType Enum  
enum RoomType {
  MEETING
  CONFERENCE
  WORKSPACE
}

' ReservationStatus Enum
enum ReservationStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

' Relationships
User ||--o{ Reservation : "1:N\nuser creates\nreservations"
Room ||--o{ TimeSlot : "1:N\nroom has\ntime slots"
TimeSlot ||--o{ Reservation : "1:N\ntime slot can be\nreserved multiple times\n(different users/dates)"
User }o--|| Role : "N:1\nuser has role"
Room }o--|| RoomType : "N:1\nroom has type"
Reservation }o--|| ReservationStatus : "N:1\nreservation has status"
Reservation ||--o| Payment : "1:1\nreservation\nhas payment"

' Additional Notes
note right of User : "Authentication principal\nwith JWT tokens and\noptional 2FA support"

note right of Room : "Bookable resources\nwith pricing and\ncapacity constraints"

note right of TimeSlot : "Available time intervals\nfor room bookings\nwith unique constraints"

note right of Reservation : "Binding between user\nand time slot with\nbusiness logic"

note right of Payment : "Handled via Stripe\nPaymentIntent API\nNot stored as entity"

' Constraints and Business Rules
note bottom : **Key Business Rules:**\n• Users can have multiple reservations\n• Each time slot can have multiple reservations (if different dates/users)\n• Reservations require successful payment\n• Admin users can manage all entities\n• 2FA is optional but recommended\n• Email verification required for booking

@enduml