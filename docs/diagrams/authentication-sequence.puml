@startuml User Authentication with Optional 2FA

title WorkReserve - User Authentication Sequence (with Optional 2FA)

actor User
participant "Frontend\n(React)" as Frontend
participant "AuthController" as AuthController
participant "UserService" as UserService
participant "TwoFactorService" as TwoFactorService
participant "JWTService" as JWTService
participant "Database" as DB
participant "Email Service" as EmailService

== Standard Login Flow ==

User -> Frontend: Enter credentials\n(email, password)
Frontend -> AuthController: POST /api/auth/login\n{email, password}

AuthController -> UserService: loginUser(request)
UserService -> DB: findByEmail(email)
DB --> UserService: User entity

alt User not found or invalid credentials
    UserService --> AuthController: UserException("Invalid credentials")
    AuthController --> Frontend: 401 Unauthorized
    Frontend --> User: Display error message
else Account locked/banned
    UserService --> AuthController: UserException("Account locked/banned")
    AuthController --> Frontend: 401 Unauthorized  
    Frontend --> User: Display account status
else Email not verified
    UserService --> AuthController: UserException("Email not verified")
    AuthController --> Frontend: 401 Unauthorized
    Frontend --> User: Display verification message
else 2FA Enabled
    UserService -> UserService: Check twoFactorEnabled
    UserService --> AuthController: TwoFactorRequiredException
    AuthController --> Frontend: 403 Forbidden\n{twoFactorRequired: true}
    Frontend --> User: Show 2FA input form
    
    == 2FA Flow ==
    
    User -> Frontend: Enter 2FA code\n(6-digit TOTP or 8-digit backup)
    Frontend -> AuthController: POST /api/auth/login/2fa\n{email, password, twoFactorCode}
    
    AuthController -> UserService: loginUserWith2FA(request)
    UserService -> UserService: Validate credentials again
    UserService -> TwoFactorService: verifyCode(secret, code)
    
    alt Invalid 2FA code
        alt Backup code (8 digits)
            TwoFactorService -> TwoFactorService: useBackupCode(user, code)
            alt Invalid backup code
                TwoFactorService --> UserService: false
                UserService --> AuthController: UserException("Invalid 2FA/backup code")
                AuthController --> Frontend: 401 Unauthorized
                Frontend --> User: Display error message
            else Valid backup code
                TwoFactorService --> UserService: true
                note right: Backup code is consumed
            end
        else Invalid TOTP code
            TwoFactorService --> UserService: false
            UserService --> AuthController: UserException("Invalid 2FA code")
            AuthController --> Frontend: 401 Unauthorized
            Frontend --> User: Display error message
        end
    else Valid 2FA code
        TwoFactorService --> UserService: true
    end
    
else Valid credentials, no 2FA
    UserService -> UserService: Authentication successful
end

== Token Generation ==

UserService -> UserService: Reset failed login attempts
UserService -> JWTService: generateToken(email)
JWTService --> UserService: accessToken

UserService -> UserService: Generate refresh token
UserService -> DB: Update user\n(refreshToken, refreshTokenExpiry)

UserService --> AuthController: AuthResponseToken\n{accessToken, refreshToken, user}
AuthController --> Frontend: 200 OK\n{token, refreshToken, user}

Frontend -> Frontend: Store tokens\n(localStorage)
Frontend -> Frontend: Set Authorization header
Frontend --> User: Redirect to dashboard

== Optional: Email Notification ==

UserService -> EmailService: Send login notification\n(if configured)
EmailService --> User: Email notification\n(new login detected)

== Error Handling ==

note over UserService, DB: **Failed Login Handling:**\n• Increment failed attempts\n• Lock account after threshold\n• Send unlock email\n• Generate unlock token

alt Too many failed attempts
    UserService -> UserService: handleFailedLogin(user)
    UserService -> DB: Update failedLoginAttempts
    
    alt Threshold exceeded
        UserService -> UserService: Lock account
        UserService -> DB: Update locked=true, accountLockedAt
        UserService -> EmailService: Send unlock email\n(with unlock token)
        EmailService --> User: Unlock account email
    end
end

@enduml