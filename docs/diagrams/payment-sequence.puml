@startuml Payment Workflow with Stripe

title WorkReserve - Payment Processing Sequence Diagram

actor User
participant "Frontend\n(React)" as Frontend
participant "PaymentController" as PaymentController
participant "PaymentService" as PaymentService
participant "Stripe API" as Stripe
participant "ReservationService" as ReservationService
participant "Database" as DB
participant "Email Service" as EmailService

== Step 1: Initialize Payment Intent ==

User -> Frontend: Select time slot and\nproceed to payment
Frontend -> PaymentController: POST /api/payments/create-intent\n{slotId, teamSize}

PaymentController -> PaymentService: createPaymentIntent(request)
PaymentService -> DB: Get time slot details\n(room, pricing)
DB --> PaymentService: TimeSlot with Room data

PaymentService -> PaymentService: Calculate total amount\n(pricePerHour × duration × teamSize)
note right: Example: $50/hour × 2 hours = $100

PaymentService -> PaymentService: Prepare Stripe parameters\n(amount in cents, currency=USD)

== Step 2: Create Stripe PaymentIntent ==

PaymentService -> Stripe: PaymentIntent.create()\nwith retry logic
note right: **Retry Logic:**\n• Exponential backoff\n• Rate limit handling\n• Max 5 retries

alt Stripe API success
    Stripe --> PaymentService: PaymentIntent\n{id, client_secret, status}
    PaymentService --> PaymentController: PaymentIntentResponse\n{clientSecret, paymentIntentId, amount}
    PaymentController --> Frontend: 200 OK\n{payment details}
else Stripe API failure
    loop Retry up to 5 times
        PaymentService -> PaymentService: Calculate delay\n(exponential backoff)
        PaymentService -> Stripe: Retry PaymentIntent.create()
    end
    
    alt Max retries exceeded
        PaymentService --> PaymentController: StripeException
        PaymentController --> Frontend: 502 Bad Gateway\n"Payment service unavailable"
        Frontend --> User: Display error message
    end
end

== Step 3: Client-side Payment Processing ==

Frontend -> Frontend: Initialize Stripe Elements\nwith client_secret
Frontend --> User: Display payment form\n(card details, billing info)

User -> Frontend: Enter payment information
User -> Frontend: Click "Confirm Payment"

Frontend -> Stripe: confirmPayment()\n(via Stripe.js)
note right: **Payment Methods:**\n• Credit/Debit Cards\n• 3D Secure authentication\n• Real-time validation

alt Payment requires authentication
    Stripe --> Frontend: requires_action status
    Frontend -> Stripe: Handle 3D Secure flow
    Stripe --> User: 3D Secure authentication
    User -> Stripe: Complete authentication
    Stripe -> Stripe: Continue payment processing
end

== Step 4: Payment Confirmation ==

alt Payment succeeded
    Stripe --> Frontend: payment_intent.succeeded
    Frontend -> Frontend: Store payment confirmation
    Frontend -> PaymentController: POST /api/payments/confirm\n{paymentIntentId}
    
    PaymentController -> PaymentService: confirmPayment(paymentIntentId)
    PaymentService -> Stripe: PaymentIntent.retrieve()\nwith retry logic
    
    loop Retry mechanism
        alt Stripe returns success
            Stripe --> PaymentService: PaymentIntent\n{status: "succeeded"}
        else Rate limit or temporary error
            PaymentService -> PaymentService: Wait with exponential backoff
            PaymentService -> Stripe: Retry retrieve operation
        end
    end
    
    PaymentService -> PaymentService: Validate payment status\n(must be "succeeded")
    
    alt Payment verified as succeeded
        PaymentService --> PaymentController: Payment confirmed
        PaymentController --> Frontend: 200 OK\n{paymentConfirmed: true}
        
        Frontend -> Frontend: Proceed to create reservation\n(with paymentIntentId)
        
    else Payment not succeeded
        PaymentService --> PaymentController: PaymentException
        PaymentController --> Frontend: 402 Payment Required
        Frontend --> User: "Payment verification failed"
    end
    
else Payment failed
    Stripe --> Frontend: payment_intent.payment_failed
    Frontend --> User: Display payment error\n(insufficient funds, card declined, etc.)
    
else Payment cancelled
    Stripe --> Frontend: User cancelled payment
    Frontend --> User: Return to booking form
end

== Step 5: Post-Payment Processing ==

note over Frontend, ReservationService: After successful payment confirmation,\nthe reservation creation flow begins\n(as shown in reservation-sequence.puml)

Frontend -> ReservationService: Create reservation\nwith verified paymentIntentId

== Step 6: Error Handling and Monitoring ==

note over PaymentService, Stripe: **Retry Strategy Details:**

PaymentService -> PaymentService: executeWithRetry(operation)
loop For each retry attempt
    alt Network/temporary error
        PaymentService -> PaymentService: Calculate delay:\nbaseDelay × 2^(attempt-1)\n+ random jitter
        PaymentService -> PaymentService: Wait calculated delay
    else Rate limit error
        PaymentService -> PaymentService: Use longer delay\nfrom Stripe headers
    else Permanent error
        PaymentService -> PaymentService: Stop retrying
        break
    end
end

== Step 7: Reconciliation and Webhooks (Future) ==

note over Stripe, EmailService: **Planned Features:**\n• Stripe webhooks for payment status updates\n• Automated reconciliation\n• Failed payment recovery\n• Refund processing\n• Payment analytics

alt Webhook received (planned)
    Stripe -> PaymentController: POST /api/payments/webhook\n{payment_intent.succeeded}
    PaymentController -> PaymentService: handleWebhook(event)
    PaymentService -> DB: Update payment status
    PaymentService -> EmailService: Send payment confirmation
    EmailService --> User: Payment receipt email
end

@enduml