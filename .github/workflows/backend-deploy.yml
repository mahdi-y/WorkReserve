name: Deploy Backend to Azure (Container)

on:
  push:
    branches: [ ci/azure-deploy ]
    paths: 
      - 'backend/**'
      - '.github/workflows/backend-deploy.yml'

env:
  AZURE_WEBAPP_NAME: ${{ secrets.AZURE_WEBAPP_BACKEND_NAME }}
  ACR_REGISTRY: ${{ secrets.ACR_REGISTRY }}
  IMAGE_NAME: workreserve-backend
  JAVA_VERSION: '21'

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.extract_tag.outputs.deploy_tag }}
      image_digest: ${{ steps.build.outputs.digest }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'

    - name: Cache Maven packages
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: Build application
      working-directory: ./backend
      run: |
        echo "🏗️ Building Spring Boot application..."
        chmod +x ./mvnw
        ./mvnw clean package -DskipTests -B
        
        if [ ! -f target/*.jar ]; then
          echo "❌ JAR file not found in target directory"
          exit 1
        fi
        
        echo "✅ JAR file created successfully"
        ls -la target/*.jar

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Azure Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.ACR_REGISTRY }}
        username: ${{ secrets.ACR_USERNAME }}
        password: ${{ secrets.ACR_PASSWORD }}

    - name: Extract metadata for Docker
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.ACR_REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=sha,prefix=ci-azure-deploy-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        file: ./backend/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64

    - name: Extract specific deployment tag
      id: extract_tag
      run: |
        FULL_TAGS="${{ steps.meta.outputs.tags }}"
        DEPLOY_TAG=$(echo "$FULL_TAGS" | tr ',' '\n' | grep "ci-azure-deploy-" | head -1)
        
        if [ -z "$DEPLOY_TAG" ]; then
          echo "❌ Could not find deployment tag"
          exit 1
        fi
        
        echo "deploy_tag=$DEPLOY_TAG" >> $GITHUB_OUTPUT
        echo "🎯 Deployment tag: $DEPLOY_TAG"

    - name: Image build summary
      run: |
        echo "🐳 Docker image built and pushed successfully"
        echo "📋 All image tags: ${{ steps.meta.outputs.tags }}"
        echo "🎯 Deploy tag: ${{ steps.extract_tag.outputs.deploy_tag }}"
        echo "🔗 Image digest: ${{ steps.build.outputs.digest }}"

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/ci/azure-deploy'
    
    environment:
      name: 'Production'
      url: https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net

    steps:
    - name: Verify deployment image
      run: |
        echo "🔍 Verifying deployment configuration..."
        echo "Image to deploy: ${{ needs.build-and-push.outputs.image_tag }}"
        echo "Commit SHA: ${{ github.sha }}"
        echo "App Service: ${{ env.AZURE_WEBAPP_NAME }}"

    - name: Install Azure CLI
      run: |
        curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash

    - name: Configure Azure App Service for Container
      run: |
        echo "🔧 Configuring App Service for container deployment..."
        
        az webapp config container set \
          --name ${{ env.AZURE_WEBAPP_NAME }} \
          --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
          --docker-custom-image-name ${{ needs.build-and-push.outputs.image_tag }} \
          --docker-registry-server-url https://${{ env.ACR_REGISTRY }} \
          --docker-registry-server-user ${{ secrets.ACR_USERNAME }} \
          --docker-registry-server-password ${{ secrets.ACR_PASSWORD }}
        
        az webapp config appsettings set \
          --name ${{ env.AZURE_WEBAPP_NAME }} \
          --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
          --settings WEBSITES_PORT=8082 SPRING_PROFILES_ACTIVE=production WEBSITES_ENABLE_APP_SERVICE_STORAGE=false
        
        echo "✅ Container configuration updated"

    - name: Wait for container state
      run: |
        echo "🐳 Waiting for container to reach 'Running' state..."
        for i in {1..40}; do
          STATE=$(az webapp show \
            --name ${{ env.AZURE_WEBAPP_NAME }} \
            --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
            --query "state" -o tsv)

          if [ "$STATE" = "Running" ]; then
            echo "✅ Container state: Running"
            break
          else
            echo "⏳ State=$STATE, retrying in 15s..."
            sleep 15
          fi
          
          if [ $i -eq 40 ]; then
            echo "❌ Timeout waiting for container to run"
            exit 1
          fi
        done

    - name: Wait for Spring Boot health
      run: |
        echo "🏥 Waiting for Spring Boot actuator health..."
        for i in {1..40}; do
          STATUS=$(curl -s -o /dev/null -w "%{http_code}" \
            "https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net/actuator/health" || echo "000")
          
          if [ "$STATUS" = "200" ]; then
            echo "✅ Spring Boot is healthy!"
            break
          else
            echo "⏳ Health not ready yet (status=$STATUS), retrying in 15s..."
            sleep 15
          fi
          
          if [ $i -eq 40 ]; then
            echo "❌ Timeout waiting for health endpoint"
            exit 1
          fi
        done

    - name: Enhanced readiness verification
      run: |
        echo "🔬 Verifying actuator endpoints..."
        BASE_URL="https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net"
        ENDPOINTS=( "/actuator/health" "/actuator/health/liveness" "/actuator/health/readiness" "/actuator/info" )
        
        for ep in "${ENDPOINTS[@]}"; do
          STATUS=$(curl -s -o /dev/null -w "%{http_code}" "$BASE_URL$ep" || echo "000")
          echo "   $ep -> HTTP $STATUS"
        done
        
        echo "🌐 Connectivity test..."
        curl -f "$BASE_URL/actuator/health" && echo "✅ Deployment succeeded"
