name: Deploy Backend to Azure (Container)

on:
  push:
    branches: [ ci/azure-deploy ]
    paths:
      - 'backend/**'
      - '.github/workflows/backend-deploy.yml'

env:
  AZURE_WEBAPP_NAME: ${{ secrets.AZURE_WEBAPP_BACKEND_NAME }}
  ACR_REGISTRY: ${{ secrets.ACR_REGISTRY }}
  IMAGE_NAME: workreserve-backend
  JAVA_VERSION: '21'

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.pick.outputs.image_tag }}
    steps:
    - uses: actions/checkout@v4

    - uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: temurin

    - name: Build JAR
      working-directory: backend
      run: ./mvnw -B -DskipTests clean package

    - uses: docker/setup-buildx-action@v3

    - uses: docker/login-action@v3
      with:
        registry: ${{ env.ACR_REGISTRY }}
        username: ${{ secrets.ACR_USERNAME }}
        password: ${{ secrets.ACR_PASSWORD }}

    - id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.ACR_REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=sha,prefix=ci-azure-deploy-

    - uses: docker/build-push-action@v5
      with:
        context: ./backend
        file: ./backend/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}

    - name: Pick deploy tag
      id: pick
      run: |
        IMAGE_TAG="$(echo "${{ steps.meta.outputs.tags }}" | tr ',' '\n' | grep 'ci-azure-deploy-' | head -1)"
        echo "image_tag=$IMAGE_TAG" >> $GITHUB_OUTPUT
        echo "Deploying: $IMAGE_TAG"

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
    - name: Azure Login (service principal)
      uses: azure/login@v2
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Configure container image
      run: |
        az webapp config container set \
          --resource-group "${{ secrets.AZURE_RESOURCE_GROUP }}" \
          --name "${{ env.AZURE_WEBAPP_NAME }}" \
          --docker-custom-image-name "${{ needs.build-and-push.outputs.image_tag }}" \
          --docker-registry-server-url "https://${{ env.ACR_REGISTRY }}" \
          --docker-registry-server-user "${{ secrets.ACR_USERNAME }}" \
          --docker-registry-server-password "${{ secrets.ACR_PASSWORD }}"

    - name: Ensure required app settings
      run: |
        az webapp config appsettings set \
          --resource-group "${{ secrets.AZURE_RESOURCE_GROUP }}" \
          --name "${{ env.AZURE_WEBAPP_NAME }}" \
          --settings \
            WEBSITES_PORT=8082 \
            SPRING_PROFILES_ACTIVE=production \
            SPRING_CONFIG_IMPORT="optional:classpath:application-secrets.properties"

    - name: Restart app
      run: |
        echo "Restarting Azure App Service..."
        az webapp restart \
          --resource-group "${{ secrets.AZURE_RESOURCE_GROUP }}" \
          --name "${{ env.AZURE_WEBAPP_NAME }}"

    - name: Verify deployment
      run: |
        echo "Waiting for deployment to complete..."
        sleep 30
        
        # Check if the application is responding
        HEALTH_URL="https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net/actuator/health"
        
        for i in {1..10}; do
          echo "Health check attempt $i/10..."
          if curl -f -s "$HEALTH_URL" > /dev/null; then
            echo "✅ Application is healthy!"
            break
          elif [ $i -eq 10 ]; then
            echo "❌ Health check failed after 10 attempts"
            exit 1
          else
            echo "⏳ Waiting 15 seconds before next check..."
            sleep 15
          fi
        done

