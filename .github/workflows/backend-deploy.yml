name: Deploy Backend to Azure (Container)

on:
  push:
    branches: [ ci/azure-deploy ]
    paths: 
      - 'backend/**'
      - '.github/workflows/backend-deploy.yml'

env:
  AZURE_WEBAPP_NAME: ${{ secrets.AZURE_WEBAPP_BACKEND_NAME }}
  ACR_REGISTRY: ${{ secrets.ACR_REGISTRY }}
  IMAGE_NAME: workreserve-backend
  JAVA_VERSION: '21'

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'

    - name: Cache Maven packages
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: Build application
      working-directory: ./backend
      run: |
        echo "🏗️ Building Spring Boot application..."
        mvn clean package -DskipTests -B
        
        if [ ! -f target/*.jar ]; then
          echo "❌ JAR file not found in target directory"
          exit 1
        fi
        
        echo "✅ JAR file created successfully"
        ls -la target/*.jar

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Azure Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.ACR_REGISTRY }}
        username: ${{ secrets.ACR_USERNAME }}
        password: ${{ secrets.ACR_PASSWORD }}

    - name: Extract metadata for Docker
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.ACR_REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        file: ./backend/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64

    - name: Image build summary
      run: |
        echo "🐳 Docker image built and pushed successfully"
        echo "📋 Image tags: ${{ steps.meta.outputs.tags }}"
        echo "🔗 Image digest: ${{ steps.build.outputs.digest }}"

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/ci/azure-deploy'
    
    environment:
      name: 'Production'
      url: https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net

    steps:
    - name: Extract deployment image tag
      id: image
      run: |
        # Use the specific tag from the build job
        IMAGE_TAG="${{ env.ACR_REGISTRY }}/${{ env.IMAGE_NAME }}:ci-azure-deploy-${{ github.sha }}"
        echo "image-tag=$IMAGE_TAG" >> $GITHUB_OUTPUT
        echo "🚀 Deploying image: $IMAGE_TAG"

    - name: Configure Azure App Service for Container
      run: |
        echo "🔧 Configuring App Service for container deployment..."
        
        curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
        
        echo "📦 Updating container configuration via REST API..."
        
        CONTAINER_CONFIG=$(cat << EOF
        {
          "DOCKER_CUSTOM_IMAGE_NAME": "${{ steps.image.outputs.image-tag }}",
          "DOCKER_REGISTRY_SERVER_URL": "https://${{ env.ACR_REGISTRY }}",
          "DOCKER_REGISTRY_SERVER_USERNAME": "${{ secrets.ACR_USERNAME }}",
          "DOCKER_REGISTRY_SERVER_PASSWORD": "${{ secrets.ACR_PASSWORD }}",
          "WEBSITES_PORT": "8082",
          "WEBSITES_ENABLE_APP_SERVICE_STORAGE": "false",
          "SPRING_PROFILES_ACTIVE": "production"
        }
        EOF
        )
        
        echo "🔄 Triggering container update..."
        
        curl -X POST \
          -H "Content-Type: application/json" \
          -u '${{ secrets.ACR_USERNAME }}:${{ secrets.ACR_PASSWORD }}' \
          -d "$CONTAINER_CONFIG" \
          "https://${{ env.AZURE_WEBAPP_NAME }}.scm.azurewebsites.net/api/settings"
        
        curl -X POST \
          -H "Content-Type: application/json" \
          -u '${{ secrets.ACR_USERNAME }}:${{ secrets.ACR_PASSWORD }}' \
          "https://${{ env.AZURE_WEBAPP_NAME }}.scm.azurewebsites.net/api/container/restart"
        
        echo "✅ Container configuration and restart triggered"

    - name: Wait for container deployment with progress monitoring
      run: |
        echo "⏳ Waiting for container deployment to complete..."
        
        for i in {1..24}; do  # 24 attempts = 12 minutes
          echo "🔍 Monitoring attempt $i/24 ($(($i * 30)) seconds elapsed)..."
          
          LOGS=$(curl -s -u '${{ secrets.ACR_USERNAME }}:${{ secrets.ACR_PASSWORD }}' \
            "https://${{ env.AZURE_WEBAPP_NAME }}.scm.azurewebsites.net/api/logs/docker" 2>/dev/null | tail -20)
          
          if echo "$LOGS" | grep -q "Started.*Application\|Tomcat started on port\|Spring Boot"; then
            echo "✅ Spring Boot application detected in logs!"
            echo "📋 Recent startup logs:"
            echo "$LOGS" | tail -5
            break
          elif echo "$LOGS" | grep -q "Error\|Exception\|Failed"; then
            echo "❌ Error detected in container logs:"
            echo "$LOGS" | grep -E "Error|Exception|Failed" | tail -3
          else
            echo "⏳ Container still starting up..."
          fi
          
          sleep 30
        done
        
        echo "✅ Container monitoring completed"

    - name: Enhanced health check with multiple endpoints
      run: |
        echo "🏥 Starting comprehensive health check..."
        
        ENDPOINTS=(
          "/"
          "/actuator"
          "/actuator/health"
          "/api/health"
          "/health"
        )
        
        SUCCESS=false
        
        for attempt in {1..15}; do
          echo "🔍 Health check attempt $attempt/15..."
          
          for endpoint in "${ENDPOINTS[@]}"; do
            URL="https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net$endpoint"
            echo "   Testing: $endpoint"
            
            RESPONSE=$(curl -s -w "HTTPSTATUS:%{http_code}" --max-time 20 "$URL" 2>/dev/null)
            HTTP_STATUS=$(echo $RESPONSE | tr -d '\n' | sed -e 's/.*HTTPSTATUS://')
            RESPONSE_BODY=$(echo $RESPONSE | sed -e 's/HTTPSTATUS:.*//g')
            
            echo "   Status: $HTTP_STATUS"
            
            if [ "$HTTP_STATUS" = "200" ]; then
              echo "✅ Health check PASSED on endpoint: $endpoint"
              echo "🌐 Backend URL: https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net"
              echo "🐳 Container image: ${{ steps.image.outputs.image-tag }}"
              echo "📊 Response preview: ${RESPONSE_BODY:0:200}..."
              SUCCESS=true
              break 2
            elif [ "$HTTP_STATUS" = "404" ]; then
              echo "   404 - Endpoint not found (this may be expected)"
            elif [ "$HTTP_STATUS" = "500" ] || [ "$HTTP_STATUS" = "503" ]; then
              echo "   Server error - application may be starting up"
            else
              echo "   Unexpected status or connection failed"
            fi
          done
          
          if [ "$SUCCESS" = true ]; then
            break
          fi
          
          echo "⏳ All endpoints failed, waiting 20 seconds before retry..."
          sleep 20
        done
        
        if [ "$SUCCESS" = false ]; then
          echo "❌ All health check attempts failed"
          echo "🔍 Final diagnostic information:"
          
          echo "📋 Recent container logs:"
          curl -s -u '${{ secrets.ACR_USERNAME }}:${{ secrets.ACR_PASSWORD }}' \
            "https://${{ env.AZURE_WEBAPP_NAME }}.scm.azurewebsites.net/api/logs/docker" 2>/dev/null | tail -20
          
          echo "📋 Container configuration:"
          curl -s -u '${{ secrets.ACR_USERNAME }}:${{ secrets.ACR_PASSWORD }}' \
            "https://${{ env.AZURE_WEBAPP_NAME }}.scm.azurewebsites.net/api/settings" 2>/dev/null | head -10
          
          exit 1
        fi

    - name: Deployment summary
      if: success()
      run: |
        echo "🎉 Container deployment completed successfully!"
        echo "📋 Deployment Summary:"
        echo "   • App Service: ${{ env.AZURE_WEBAPP_NAME }}"
        echo "   • Container Registry: ${{ env.ACR_REGISTRY }}"
        echo "   • Image: ${{ steps.image.outputs.image-tag }}"
        echo "   • Port: 8082"
        echo "   • Health Check: ✅ Passed"
        echo "   • URL: https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net"
        echo "   • Authentication: ACR Credentials"

    - name: Post-deployment validation
      if: success()
      run: |
        echo "🔍 Running post-deployment validation..."
        
        echo "Testing main endpoints:"
        
        if curl -s -f "https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net/" > /dev/null; then
          echo "✅ Root endpoint responding"
        else
          echo "⚠️ Root endpoint not responding"
        fi
        
        if curl -s -f "https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net/actuator/health" > /dev/null; then
          echo "✅ Health endpoint responding"
          echo "📊 Health status:"
          curl -s "https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net/actuator/health" | jq '.' || echo "Health endpoint responded (JSON parsing failed)"
        else
          echo "⚠️ Health endpoint not responding"
        fi
        
        echo "🏁 Deployment validation completed"

