name: Deploy Backend to Azure (Container)

on:
  push:
    branches: [ ci/azure-deploy ]
    paths: 
      - 'backend/**'
      - '.github/workflows/backend-deploy.yml'

env:
  AZURE_WEBAPP_NAME: ${{ secrets.AZURE_WEBAPP_BACKEND_NAME }}
  ACR_REGISTRY: ${{ secrets.ACR_REGISTRY }}
  IMAGE_NAME: workreserve-backend
  JAVA_VERSION: '21'

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.extract_tag.outputs.deploy_tag }}
      image_digest: ${{ steps.build.outputs.digest }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'

    - name: Cache Maven packages
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: Build application
      working-directory: ./backend
      run: |
        echo "🏗️ Building Spring Boot application..."
        chmod +x ./mvnw
        ./mvnw clean package -DskipTests -B
        
        if [ ! -f target/*.jar ]; then
          echo "❌ JAR file not found in target directory"
          exit 1
        fi
        
        echo "✅ JAR file created successfully"
        ls -la target/*.jar

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Azure Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.ACR_REGISTRY }}
        username: ${{ secrets.ACR_USERNAME }}
        password: ${{ secrets.ACR_PASSWORD }}

    - name: Extract metadata for Docker
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.ACR_REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=sha,prefix=ci-azure-deploy-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        file: ./backend/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64

    - name: Extract specific deployment tag
      id: extract_tag
      run: |
        FULL_TAGS="${{ steps.meta.outputs.tags }}"
        DEPLOY_TAG=$(echo "$FULL_TAGS" | tr ',' '\n' | grep "ci-azure-deploy-" | head -1)
        
        if [ -z "$DEPLOY_TAG" ]; then
          echo "❌ Could not find deployment tag"
          exit 1
        fi
        
        echo "deploy_tag=$DEPLOY_TAG" >> $GITHUB_OUTPUT
        echo "🎯 Deployment tag: $DEPLOY_TAG"

    - name: Image build summary
      run: |
        echo "🐳 Docker image built and pushed successfully"
        echo "📋 All image tags: ${{ steps.meta.outputs.tags }}"
        echo "🎯 Deploy tag: ${{ steps.extract_tag.outputs.deploy_tag }}"
        echo "🔗 Image digest: ${{ steps.build.outputs.digest }}"

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/ci/azure-deploy'
    
    environment:
      name: 'Production'
      url: https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net

    steps:
    - name: Verify deployment image
      run: |
        echo "🔍 Verifying deployment configuration..."
        echo "Image to deploy: ${{ needs.build-and-push.outputs.image_tag }}"
        echo "Commit SHA: ${{ github.sha }}"
        echo "App Service: ${{ env.AZURE_WEBAPP_NAME }}"

    - name: Block until Spring Boot actuator health returns 200 (no SP, no Kudu)
      env:
        APP: ${{ env.AZURE_WEBAPP_NAME }}
      run: |
        set -euo pipefail
        HEALTH_URL="https://${APP}.azurewebsites.net/actuator/health"
        ROOT_URL="https://${APP}.azurewebsites.net/"
        TIMEOUT_SECONDS=900   # 15 minutes total
        INTERVAL_SECONDS=10
        DEADLINE=$((SECONDS + TIMEOUT_SECONDS))

        echo "🩺 Waiting for actuator health at $HEALTH_URL (timeout ${TIMEOUT_SECONDS}s)..."
        while [ $SECONDS -lt $DEADLINE ]; do
          if curl -fsS "$HEALTH_URL" >/dev/null 2>&1; then
            echo "✅ Actuator health endpoint responded 200"
            exit 0
          fi
          # fallback to root if actuator not exposed
          if curl -fsS "$ROOT_URL" >/dev/null 2>&1; then
            echo "✅ Root endpoint responds (actuator may be disabled)."
            exit 0
          fi
          echo "⏳ Still waiting for application to be ready... retrying in ${INTERVAL_SECONDS}s"
          sleep $INTERVAL_SECONDS
        done

        echo "❌ Timed out waiting for application health after ${TIMEOUT_SECONDS}s."
        echo "⚠️ Diagnostics you can run manually:"
        echo "  • Verify the app URL is reachable: https://${APP}.azurewebsites.net/"
        echo "  • Ensure /actuator/health is enabled in production profile or change HEALTH_URL"
        echo "  • Confirm the deployed image is the expected one in Azure Portal -> Container Settings"
        exit 1
